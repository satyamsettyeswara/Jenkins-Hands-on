Running a CI/CD Pipeline with Docker
üìù Goal
‚úÖ Clone a GitHub repo
‚úÖ Build a Docker image
‚úÖ Run tests inside a container
‚úÖ Push the image to Docker Hub
‚úÖ Deploy the container automatically

Step 1Ô∏è‚É£: Create a Sample App
üîπ If you already have a repo with a Dockerfile, you can use that.
üîπ Otherwise, create a simple Node.js app with a Dockerfile.

Clone this repo (if you don‚Äôt have one):

sh
Copy
Edit
git clone https://github.com/heroku/node-js-sample.git myapp
Move into the directory:

sh
Copy
Edit
cd myapp
Create a Dockerfile inside myapp/:

dockerfile
Copy
Edit
FROM node:18
WORKDIR /app
COPY . .
RUN npm install
CMD ["npm", "start"]
EXPOSE 5000
Push this to GitHub (if not already there).

Step 2Ô∏è‚É£: Create a Jenkins Pipeline for CI/CD
üîπ Go to Jenkins ‚Üí New Item ‚Üí Pipeline ‚Üí OK
üîπ Use this pipeline script:

groovy
Copy
Edit
pipeline {
    agent any
    environment {
        IMAGE_NAME = "your-dockerhub-username/myapp"
        IMAGE_TAG = "latest"
        DOCKER_CREDENTIALS = "docker-hub"
    }
    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/your-github-username/myapp.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh "docker build -t $IMAGE_NAME:$IMAGE_TAG ."
            }
        }
        stage('Run Tests') {
            steps {
                sh "docker run --rm $IMAGE_NAME:$IMAGE_TAG npm test"
            }
        }
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                }
            }
        }
        stage('Push Image to Docker Hub') {
            steps {
                sh "docker push $IMAGE_NAME:$IMAGE_TAG"
            }
        }
        stage('Deploy Container') {
            steps {
                sh "docker stop myapp-container || true"
                sh "docker rm myapp-container || true"
                sh "docker run -d --name myapp-container -p 5000:5000 $IMAGE_NAME:$IMAGE_TAG"
            }
        }
    }
}
Step 3Ô∏è‚É£: Run the Pipeline
1Ô∏è‚É£ Save the pipeline.
2Ô∏è‚É£ Click Build Now.
3Ô∏è‚É£ If successful, you‚Äôll see:

vbnet
Copy
Edit
Running tests...
Tests passed!
Successfully pushed to Docker Hub!
Container deployed on port 5000.
4Ô∏è‚É£ Open http://localhost:5000 to see the running app. üéâ

